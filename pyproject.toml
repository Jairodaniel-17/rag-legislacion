[project]
name = "rag-legislacion"
version = "0.1.0"
description = "Sistema de Recuperación y Generación Aumentada (RAG) para documentos legislativos. Permite procesar, indexar y consultar documentación legal utilizando modelos de lenguaje y búsqueda semántica."
readme = "README.md"
requires-python = ">=3.11"
authors = [
    { name = "jairo Daniel Mendoza Torres", email = "20b3010069@untels.edu.pe" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Legal Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Topic :: Text Processing :: General",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "docx2txt>=0.8",
    "faiss-cpu>=1.10.0",
    "langchain>=0.3.18",
    "langchain-community>=0.3.17",
    "langchain-core>=0.3.35",
    "langchain-huggingface>=0.1.2",
    "langchain-ollama>=0.2.3",
    "langchain-openai>=0.3.6",
    "loguru>=0.7.3",
    "pdfplumber>=0.11.5",
    "pymupdf>=1.25.3",
    "python-docx>=1.1.2",
    "requests>=2.32.3",
    "rich>=13.9.4",
]

[project.optional-dependencies]
dev = ["pytest>=7.0", "ruff>=0.1.0"]

[tool.ruff]
# Reglas de linting: 
# E: errores de pycodestyle
# F: pyflakes (errores lógicos)
# B: flake8-bugbear (bugs potenciales)
# I: isort (ordenamiento de imports)
# D: pydocstring (documentación)
select = ["E", "F", "B", "I", "D"]
ignore = ["D100", "D104"]          # Ignorar docstrings faltantes en módulos y paquetes

# Configuración de formateo
line-length = 90
target-version = "py311"

# Ordenamiento de imports
[tool.ruff.isort]
known-first-party = ["llm", "vectorstore"]
